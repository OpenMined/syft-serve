name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size by excluding some combinations
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Set up project
      run: uv sync --all-extras

    - name: Run linting
      run: |
        uv run ruff check src/ tests/
        uv run black --check src/ tests/

    - name: Run type checking
      run: uv run mypy src/

    - name: Run tests
      run: uv run pytest tests/ --verbose --cov=syft_serve --cov-report=xml --cov-report=term-missing --junit-xml=test-results.xml

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          test-results.xml
          coverage.xml
          htmlcov/

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Set up project
      run: uv sync --all-extras

    - name: Run integration tests
      run: |
        # Run integration tests if they exist, otherwise skip
        uv run pytest tests/ -m integration --verbose || echo "No integration tests found"

    - name: Test package installation
      run: |
        # Test that the package can be built and installed
        uv build
        pip install dist/*.whl
        python -c "import syft_serve; print('Package import successful')"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Set up project
      run: uv sync --all-extras

    - name: Run security checks
      run: |
        uv add --dev bandit[toml]
        uv run bandit -r src/
        
    - name: Check for vulnerabilities
      run: |
        # Use pip-audit as a more reliable alternative to safety
        uv add --dev pip-audit
        uv run pip-audit --desc

  docs-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Set up project
      run: uv sync --all-extras

    - name: Test tutorial notebook
      run: |
        uv add --dev nbconvert jupyter
        uv run jupyter nbconvert --to script tutorial.ipynb
        # Basic syntax check of the generated script
        python -m py_compile tutorial.py

    - name: Validate documentation links
      run: |
        # Check that documentation files exist and are valid HTML
        python -c "
        import os
        from pathlib import Path
        
        docs_dir = Path('docs')
        html_files = list(docs_dir.glob('**/*.html'))
        
        assert len(html_files) > 0, 'No HTML files found in docs/'
        
        for html_file in html_files:
            content = html_file.read_text()
            assert '<html' in content, f'{html_file} is not valid HTML'
            assert '</html>' in content, f'{html_file} is not valid HTML'
        
        print(f'Validated {len(html_files)} documentation files')
        "